generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Station {
  id          String @id @default(cuid())
  stationId   String @unique
  stationName String

  status      String? // optional
  stationCode  String? // optional
  description String? // optional
  location    String? // optional
  operator    String? // optional
  addStation  String? // optional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  technicalSpecifications TechnicalSpecification[] @relation("StationToTechnicalSpecifications")

  specifications Specification[]
  flowCharts     FlowChart[]     @relation("StationToFlowCharts")
  documentation  Documentation[] @relation("StationToDocumentation")


}

model TechnicalSpecification {
  id    Int    @id @default(autoincrement())
  name  String
  value String

  stationId String
  station   Station @relation("StationToTechnicalSpecifications", fields: [stationId], references: [id], onDelete: Cascade)
}

model FlowChart {
  id        String          @id @default(cuid())
  content   String
  stationId String
  station   Station         @relation("StationToFlowCharts", fields: [stationId], references: [id] ,onDelete: Cascade) // ✅ MATCHED name
  files     FlowChartFile[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model FlowChartFile {
  id          String    @id @default(cuid())
  name        String
  size        Int
  url         String
  flowChartId String
  flowChart   FlowChart @relation(fields: [flowChartId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Documentation {
  id        String              @id @default(cuid())
  content   String
  stationId String
  station   Station             @relation("StationToDocumentation", fields: [stationId], references: [id], onDelete: Cascade)
  files     DocumentationFile[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model DocumentationFile {
  id              String        @id @default(cuid())
  name            String
  size            Int
  url             String
  documentationId String
  documentation   Documentation @relation(fields: [documentationId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
}

enum Type {
  TEXT
  CHECKBOX
  DROPDOWN
  FILE_UPLOAD
  number
}

// Specification Model
model Specification {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  type        Type     @default(TEXT)
  isRequired  Boolean  @default(false)
  isActive    Boolean  @default(true)
  suggestions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Foreign key
  stationId String
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model Role {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String?
  permissions    RolePermission[]
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  createdBy      String?
  updatedBy      String?

  users          User[]

  // ✅ Add this to fix the relation
  departmentId   String?          
  department     Department?      @relation(fields: [departmentId], references: [id])
}

// Permission Model
model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  metadata    Json?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  createdBy   String?
  updatedBy   String?
  roles       RolePermission[]
}

// RolePermission Model
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

//Department Model
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Employee {
  id             String        @id @default(cuid())
  firstName      String
  lastName       String
  email          String        @unique
  userId         String        @unique
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  createdBy      String?
  updatedBy      String?
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}

// Organization Model
model Organization {
  id        String    @id @default(cuid())
  name      String    @unique
  address   String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String?
  updatedBy String?
}



// User Model
model User {
  id                   String     @id @default(cuid())
  email                String     @unique
  mobile               String     @unique
  username             String     @unique
  fullname             String
  password             String
  employeeId           String?
  customerId           String?    @unique
  isActive             Boolean    @default(true)
  passwordResetToken   String?
  passwordResetExpires DateTime?
  refreshToken         String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  deletedAt            DateTime?
  createdBy            String?
  updatedBy            String?
  employee             Employee?
  customer             Customer?  @relation("CustomerUser", fields: [customerId], references: [id], onDelete: Cascade)
  roleId               String
  role                 Role       @relation(fields: [roleId], references: [id])
}



// Customer Management Models
model Customer {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  phone        String
  address      String?
  city         String?
  zipCode     String?
  state        String?
  country      String?
  website      String?
   user      User?     @relation("CustomerUser")
  status       String     @default("active")
  createdBy String?
  updatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([status])
  @@index([createdBy])
  @@index([updatedBy])
}
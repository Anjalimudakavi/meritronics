generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Station {
  id          String @id @default(cuid())
  stationId   String @unique
  stationName String

  status      String? // optional
  stationCode  String? // optional
  description String? // optional
  location    String? // optional
  operator    String? // optional
  addStation  String? // optional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  technicalSpecifications TechnicalSpecification[] @relation("StationToTechnicalSpecifications")

  specifications Specification[]
  flowCharts     FlowChart[]     @relation("StationToFlowCharts")
  documentation  Documentation[] @relation("StationToDocumentation")


}

model TechnicalSpecification {
  id    Int    @id @default(autoincrement())
  name  String
  value String

  stationId String
  station   Station @relation("StationToTechnicalSpecifications", fields: [stationId], references: [id], onDelete: Cascade)
}

model FlowChart {
  id        String          @id @default(cuid())
  content   String
  stationId String
  station   Station         @relation("StationToFlowCharts", fields: [stationId], references: [id] ,onDelete: Cascade) // âœ… MATCHED name
  files     FlowChartFile[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model FlowChartFile {
  id          String    @id @default(cuid())
  name        String
  size        Int
  url         String
  flowChartId String
  flowChart   FlowChart @relation(fields: [flowChartId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Documentation {
  id        String              @id @default(cuid())
  content   String
  stationId String
  station   Station             @relation("StationToDocumentation", fields: [stationId], references: [id], onDelete: Cascade)
  files     DocumentationFile[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model DocumentationFile {
  id              String        @id @default(cuid())
  name            String
  size            Int
  url             String
  documentationId String
  documentation   Documentation @relation(fields: [documentationId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
}

enum Type {
  TEXT
  CHECKBOX
  DROPDOWN
  FILE_UPLOAD
  number
}

// Specification Model
model Specification {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  type        Type     @default(TEXT)
  isRequired  Boolean  @default(false)
  isActive    Boolean  @default(true)
  suggestions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Foreign key
  stationId String
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

model Organization {
  id    String @id @default(uuid())
  name  String
  roles Role[]
  users User[]
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  users       User[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProcessFlow {
  id        Int       @id @default(autoincrement())
  fileName  String
  filePath  String
  fileSize  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  stations  Station[]
}

enum LabelLocation {
  Top
  Bottom
}

enum PCBBoardSide {
  TOP
  BOTTOM
}

enum PrintingMaterial {
  SOLDER_PASTE
  GLUE_EPOXY
}

enum SolderPasteType {
  NO_CLEAN
  WATER_SOLUBLE
  OTHER
}

enum SqueegeeType {
  RUBBER
  METAL
  OTHER
}

model SqueegeeSettings {
  id        Int       @id @default(autoincrement())
  SNAP_OFF  Float
  SPEED     Float
  PRESSURE  Float
  DOWN_STOP Float

  stations  Station[]
}

model Station {
  id                        Int              @id @default(autoincrement())
  stationId                 String           @unique
  stationName               String           @unique  // ✅ Marked as unique
  labelLocation             LabelLocation
  programName               String
  labelFormat               String
  labelRange                String
  boardDirectionFirstSide   String
  boardDirectionSecondSide  String

  pcbBoardSide              PCBBoardSide
  stencilName               String
  stencilRevision           String
  pwb                       String
  pwbRevision               String
  stencilThickness          Float
  printingMaterial          PrintingMaterial
  solderPasteType           SolderPasteType
  squeegeeType              SqueegeeType

  squeegeeSettingsId        Int
  squeegeeSettings          SqueegeeSettings @relation(fields: [squeegeeSettingsId], references: [id])

  processFlowId             Int?
  processFlow               ProcessFlow? @relation(fields: [processFlowId], references: [id])

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  mpis                      Mpi[]
}

model Mpi {
  id               String   @id @default(uuid())
  revision         String
  effectiveDate    DateTime
  purpose          String
  scope            String
  equipment        String
  materials        String
  responsibilities String
  procedure        String
  safety           String
  processControl   String

  stationName      String
  station          Station  @relation(fields: [stationName], references: [stationName])  // ✅ Now valid

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Organization {
  id    String  @id @default(uuid())
  name  String
  roles Role[]
  users User[]
}

model Role {
  id             String       @id @default(uuid())
  name           String       @unique
  description    String?
  users          User[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  password       String

  roleId         String?
  role           Role?        @relation(fields: [roleId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}
